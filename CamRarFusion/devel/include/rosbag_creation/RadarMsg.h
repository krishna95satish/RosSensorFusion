// Generated by gencpp from file rosbag_creation/RadarMsg.msg
// DO NOT EDIT!


#ifndef ROSBAG_CREATION_MESSAGE_RADARMSG_H
#define ROSBAG_CREATION_MESSAGE_RADARMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rosbag_creation
{
template <class ContainerAllocator>
struct RadarMsg_
{
  typedef RadarMsg_<ContainerAllocator> Type;

  RadarMsg_()
    : header()
    , videoName_()
    , frame_(0)
    , radarRange_(0.0)
    , radarAngle_(0.0)
    , cameraTick_(0)
    , radarTick_(0)
    , lateralDistance_(0.0)
    , targetID_(0)
    , dataConfidence_(0)  {
    }
  RadarMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , videoName_(_alloc)
    , frame_(0)
    , radarRange_(0.0)
    , radarAngle_(0.0)
    , cameraTick_(0)
    , radarTick_(0)
    , lateralDistance_(0.0)
    , targetID_(0)
    , dataConfidence_(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _videoName__type;
  _videoName__type videoName_;

   typedef int16_t _frame__type;
  _frame__type frame_;

   typedef double _radarRange__type;
  _radarRange__type radarRange_;

   typedef double _radarAngle__type;
  _radarAngle__type radarAngle_;

   typedef int64_t _cameraTick__type;
  _cameraTick__type cameraTick_;

   typedef int64_t _radarTick__type;
  _radarTick__type radarTick_;

   typedef double _lateralDistance__type;
  _lateralDistance__type lateralDistance_;

   typedef int8_t _targetID__type;
  _targetID__type targetID_;

   typedef int8_t _dataConfidence__type;
  _dataConfidence__type dataConfidence_;





  typedef boost::shared_ptr< ::rosbag_creation::RadarMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosbag_creation::RadarMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RadarMsg_

typedef ::rosbag_creation::RadarMsg_<std::allocator<void> > RadarMsg;

typedef boost::shared_ptr< ::rosbag_creation::RadarMsg > RadarMsgPtr;
typedef boost::shared_ptr< ::rosbag_creation::RadarMsg const> RadarMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosbag_creation::RadarMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosbag_creation::RadarMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosbag_creation::RadarMsg_<ContainerAllocator1> & lhs, const ::rosbag_creation::RadarMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.videoName_ == rhs.videoName_ &&
    lhs.frame_ == rhs.frame_ &&
    lhs.radarRange_ == rhs.radarRange_ &&
    lhs.radarAngle_ == rhs.radarAngle_ &&
    lhs.cameraTick_ == rhs.cameraTick_ &&
    lhs.radarTick_ == rhs.radarTick_ &&
    lhs.lateralDistance_ == rhs.lateralDistance_ &&
    lhs.targetID_ == rhs.targetID_ &&
    lhs.dataConfidence_ == rhs.dataConfidence_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosbag_creation::RadarMsg_<ContainerAllocator1> & lhs, const ::rosbag_creation::RadarMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosbag_creation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosbag_creation::RadarMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosbag_creation::RadarMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosbag_creation::RadarMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2659b67e2e8133a7adad5a93bab2f3a";
  }

  static const char* value(const ::rosbag_creation::RadarMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2659b67e2e8133aULL;
  static const uint64_t static_value2 = 0x7adad5a93bab2f3aULL;
};

template<class ContainerAllocator>
struct DataType< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosbag_creation/RadarMsg";
  }

  static const char* value(const ::rosbag_creation::RadarMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string videoName_\n"
"int16 frame_\n"
"float64 radarRange_\n"
"float64 radarAngle_\n"
"int64 cameraTick_\n"
"int64 radarTick_\n"
"float64 lateralDistance_\n"
"int8 targetID_\n"
"int8 dataConfidence_\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rosbag_creation::RadarMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.videoName_);
      stream.next(m.frame_);
      stream.next(m.radarRange_);
      stream.next(m.radarAngle_);
      stream.next(m.cameraTick_);
      stream.next(m.radarTick_);
      stream.next(m.lateralDistance_);
      stream.next(m.targetID_);
      stream.next(m.dataConfidence_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosbag_creation::RadarMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosbag_creation::RadarMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "videoName_: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.videoName_);
    s << indent << "frame_: ";
    Printer<int16_t>::stream(s, indent + "  ", v.frame_);
    s << indent << "radarRange_: ";
    Printer<double>::stream(s, indent + "  ", v.radarRange_);
    s << indent << "radarAngle_: ";
    Printer<double>::stream(s, indent + "  ", v.radarAngle_);
    s << indent << "cameraTick_: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cameraTick_);
    s << indent << "radarTick_: ";
    Printer<int64_t>::stream(s, indent + "  ", v.radarTick_);
    s << indent << "lateralDistance_: ";
    Printer<double>::stream(s, indent + "  ", v.lateralDistance_);
    s << indent << "targetID_: ";
    Printer<int8_t>::stream(s, indent + "  ", v.targetID_);
    s << indent << "dataConfidence_: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dataConfidence_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSBAG_CREATION_MESSAGE_RADARMSG_H
