# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosbag_creation/videoMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class videoMsg(genpy.Message):
  _md5sum = "f13598e7a6de6888828400fe1afcd644"
  _type = "rosbag_creation/videoMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string vName
int16 frame
float64 radarRange
float64 radarAngle
int64 camTick
int64 radarTick
float64 lateralDist
int8 targetID
int8 dataConfidence"""
  __slots__ = ['vName','frame','radarRange','radarAngle','camTick','radarTick','lateralDist','targetID','dataConfidence']
  _slot_types = ['string','int16','float64','float64','int64','int64','float64','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vName,frame,radarRange,radarAngle,camTick,radarTick,lateralDist,targetID,dataConfidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(videoMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vName is None:
        self.vName = ''
      if self.frame is None:
        self.frame = 0
      if self.radarRange is None:
        self.radarRange = 0.
      if self.radarAngle is None:
        self.radarAngle = 0.
      if self.camTick is None:
        self.camTick = 0
      if self.radarTick is None:
        self.radarTick = 0
      if self.lateralDist is None:
        self.lateralDist = 0.
      if self.targetID is None:
        self.targetID = 0
      if self.dataConfidence is None:
        self.dataConfidence = 0
    else:
      self.vName = ''
      self.frame = 0
      self.radarRange = 0.
      self.radarAngle = 0.
      self.camTick = 0
      self.radarTick = 0
      self.lateralDist = 0.
      self.targetID = 0
      self.dataConfidence = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.vName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h2d2qd2b().pack(_x.frame, _x.radarRange, _x.radarAngle, _x.camTick, _x.radarTick, _x.lateralDist, _x.targetID, _x.dataConfidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vName = str[start:end].decode('utf-8')
      else:
        self.vName = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.frame, _x.radarRange, _x.radarAngle, _x.camTick, _x.radarTick, _x.lateralDist, _x.targetID, _x.dataConfidence,) = _get_struct_h2d2qd2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.vName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h2d2qd2b().pack(_x.frame, _x.radarRange, _x.radarAngle, _x.camTick, _x.radarTick, _x.lateralDist, _x.targetID, _x.dataConfidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vName = str[start:end].decode('utf-8')
      else:
        self.vName = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.frame, _x.radarRange, _x.radarAngle, _x.camTick, _x.radarTick, _x.lateralDist, _x.targetID, _x.dataConfidence,) = _get_struct_h2d2qd2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h2d2qd2b = None
def _get_struct_h2d2qd2b():
    global _struct_h2d2qd2b
    if _struct_h2d2qd2b is None:
        _struct_h2d2qd2b = struct.Struct("<h2d2qd2b")
    return _struct_h2d2qd2b
